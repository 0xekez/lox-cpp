#ifndef stmt_h
#define stmt_h

// WARNING: THIS FILE IS AUTOGENERATED
// Changes you make will not be kept.

/**
 * In loxc, a statment is just data and as such has no associated methods.
 * Instead, loxc makes use of the visitor pattern to visit statements. For
 * more information on each expression, and to add another one see
 * ../tools/loxc_statements.txt
 */

#include <memory> // std::shared_ptr
#include <variant>
#include <vector>
#include "expr.h"

using Stmt = std::variant<
	std::monostate,
	std::shared_ptr<struct PrintStmt>,
	std::shared_ptr<struct ExprStmt>,
	std::shared_ptr<struct VarStmt>,
	std::shared_ptr<struct BlockStmt>,
	std::shared_ptr<struct IfStmt>,
	std::shared_ptr<struct WhileStmt>,
	std::shared_ptr<struct FuncStmt>,
	std::shared_ptr<struct ReturnStmt> >;

struct PrintStmt
{
	Expr expression;

	PrintStmt (Expr expression_in)
		: expression(std::move(expression_in)) {}
};

struct ExprStmt
{
	Expr expression;

	ExprStmt (Expr expression_in)
		: expression(std::move(expression_in)) {}
};

struct VarStmt
{
	loxc::token name;
	Expr initializer;

	VarStmt (loxc::token name_in, Expr initializer_in)
		: name(std::move(name_in)), initializer(std::move(initializer_in)) {}
};

struct BlockStmt
{
	std::vector<Stmt> stmt_list;

	BlockStmt (std::vector<Stmt> stmt_list_in)
		: stmt_list(std::move(stmt_list_in)) {}
};

struct IfStmt
{
	Expr condition;
	Stmt t_branch;
	Stmt f_branch;

	IfStmt (Expr condition_in, Stmt t_branch_in, Stmt f_branch_in)
		: condition(std::move(condition_in)), t_branch(std::move(t_branch_in)), f_branch(std::move(f_branch_in)) {}
};

struct WhileStmt
{
	Expr condition;
	Stmt body;

	WhileStmt (Expr condition_in, Stmt body_in)
		: condition(std::move(condition_in)), body(std::move(body_in)) {}
};

struct FuncStmt
{
	loxc::token name;
	std::vector<loxc::token> params;
	Stmt body;

	FuncStmt (loxc::token name_in, std::vector<loxc::token> params_in, Stmt body_in)
		: name(std::move(name_in)), params(std::move(params_in)), body(std::move(body_in)) {}
};

struct ReturnStmt
{
	loxc::token keyword;
	Expr value;

	ReturnStmt (loxc::token keyword_in, Expr value_in)
		: keyword(std::move(keyword_in)), value(std::move(value_in)) {}
};

#endif